generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password      String
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  emailVerified DateTime?
  companyId     String?
  phone         String?
  professional  Professional?
  sessions      Session[]
  company       Company?      @relation(fields: [companyId], references: [id])
  passwordResetTokens PasswordResetToken[]
}

model Company {
  id            String         @id @default(cuid())
  name          String
  document      String         @unique
  phone         String?
  address       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  patients      Patient[]
  professionals Professional[]
  users         User[]
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Patient {
  id                    String        @id @default(cuid())
  name                  String
  email                 String?
  phone                 String?
  dateOfBirth           DateTime?
  gender                String?
  address               String?
  healthInsurance       String?
  healthInsuranceNumber String?
  observations          String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  companyId             String
  documentNumber        String?
  isFirstVisit          Boolean       @default(false)
  appointments          Appointment[]
  company               Company       @relation(fields: [companyId], references: [id])
}

model Professional {
  id           String        @id @default(cuid())
  name         String
  email        String
  phone        String?
  cnpj         String?
  specialty    String?
  bio          String?
  userId       String        @unique
  companyId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  company      Company       @relation(fields: [companyId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
}

model Appointment {
  id             String       @id @default(cuid())
  date           String
  startTime      String
  endTime        String
  status         String
  notes          String?
  treatment      String?
  patientId      String
  professionalId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  patient        Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}
